{"ast":null,"code":"import { useRef, useState, useEffect } from 'react';\n\nfunction useClickOutside(callback) {\n  var container = useRef(null);\n\n  var _a = useState(false),\n      isTouchEvent = _a[0],\n      setTouchEvent = _a[1];\n\n  var eventType = isTouchEvent ? 'touchend' : 'click';\n\n  function handleEvent(e) {\n    if (e.type === 'click' && isTouchEvent) {\n      return;\n    } // prettier-ignore\n\n\n    if (container.current && e.target !== null) {\n      if (!container.current.contains(e.target)) {\n        callback(e);\n      }\n    }\n  }\n\n  useEffect(function () {\n    document.addEventListener(eventType, handleEvent, true);\n    return function () {\n      document.removeEventListener(eventType, handleEvent, true);\n    };\n  });\n  useEffect(function () {\n    setTouchEvent('ontouchstart' in document.documentElement);\n  }, []);\n  return container;\n}\n\nexport default useClickOutside;","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":";;SAEwB,e,CAAgB,Q,EAAuB;AAC7D,MAAM,SAAS,GAAG,MAAM,CAAc,IAAd,CAAxB;;AACM,MAAA,EAAA,GAAA,QAAA,CAAA,KAAA,CAAA;AAAA,MAAC,YAAA,GAAA,EAAA,CAAA,CAAA,CAAD;AAAA,MAAe,aAAA,GAAA,EAAA,CAAA,CAAA,CAAf;;AACN,MAAM,SAAS,GAAG,YAAY,GAAG,UAAH,GAAgB,OAA9C;;AAEA,WAAS,WAAT,CAAqB,CAArB,EAA6B;AAC3B,QAAI,CAAC,CAAC,IAAF,KAAW,OAAX,IAAsB,YAA1B,EAAwC;AAAE;AAAS,KADxB,CACwB;;;AAEnD,QAAI,SAAS,CAAC,OAAV,IAAqB,CAAC,CAAC,MAAF,KAAa,IAAtC,EAA4C;AAC1C,UAAI,CAAC,SAAS,CAAC,OAAV,CAAkB,QAAlB,CAA2B,CAAC,CAAC,MAA7B,CAAL,EAAmD;AACjD,QAAA,QAAQ,CAAC,CAAD,CAAR;AACD;AACF;AACF;;AAED,EAAA,SAAS,CAAC,YAAA;AACR,IAAA,QAAQ,CAAC,gBAAT,CAA0B,SAA1B,EAAqC,WAArC,EAAkD,IAAlD;AAEA,WAAO,YAAA;AACL,MAAA,QAAQ,CAAC,mBAAT,CAA6B,SAA7B,EAAwC,WAAxC,EAAqD,IAArD;AACD,KAFD;AAGD,GANQ,CAAT;AAQA,EAAA,SAAS,CAAC,YAAA;AACR,IAAA,aAAa,CAAC,kBAAkB,QAAQ,CAAC,eAA5B,CAAb;AACD,GAFQ,EAEN,EAFM,CAAT;AAIA,SAAO,SAAP;AACD","sourcesContent":["import { useEffect, useRef, useState } from 'react';\n\nexport default function useClickOutside(callback: EventListener) {\n  const container = useRef<HTMLElement>(null);\n  const [isTouchEvent, setTouchEvent] = useState(false);\n  const eventType = isTouchEvent ? 'touchend' : 'click';\n\n  function handleEvent(e: Event) {\n    if (e.type === 'click' && isTouchEvent) { return; } // prettier-ignore\n\n    if (container.current && e.target !== null) {\n      if (!container.current.contains(e.target as Node)) {\n        callback(e);\n      }\n    }\n  }\n\n  useEffect(() => {\n    document.addEventListener(eventType, handleEvent, true);\n\n    return () => {\n      document.removeEventListener(eventType, handleEvent, true);\n    };\n  });\n\n  useEffect(() => {\n    setTouchEvent('ontouchstart' in document.documentElement);\n  }, []);\n\n  return container;\n}\n"]},"metadata":{},"sourceType":"module"}